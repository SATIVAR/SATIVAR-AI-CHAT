const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function verifyDatabaseConnection() {
  console.log('üîç Verificando conex√£o com banco de dados...');
  try {
    await prisma.$connect();
    console.log('‚úÖ Conex√£o com banco de dados estabelecida com sucesso');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao conectar com banco de dados:', error.message);
    return false;
  }
}

async function verifyAssociationData() {
  console.log('\nüîç Verificando dados da associa√ß√£o "sativar"...');
  
  try {
    const association = await prisma.association.findUnique({
      where: { subdomain: 'sativar' }
    });

    if (!association) {
      console.log('‚ö†Ô∏è  Associa√ß√£o "sativar" n√£o encontrada no banco de dados');
      return null;
    }

    console.log('‚úÖ Associa√ß√£o "sativar" encontrada:');
    console.log(`   - ID: ${association.id}`);
    console.log(`   - Nome: ${association.name}`);
    console.log(`   - Subdomain: ${association.subdomain}`);
    console.log(`   - Ativa: ${association.isActive ? '‚úÖ Sim' : '‚ùå N√£o'}`);
    console.log(`   - WordPress URL: ${association.wordpressUrl}`);
    console.log(`   - Criada em: ${association.createdAt}`);

    if (!association.isActive) {
      console.log('‚ö†Ô∏è  ATEN√á√ÉO: Associa√ß√£o existe mas n√£o est√° ativa!');
    }

    return association;
  } catch (error) {
    console.error('‚ùå Erro ao verificar associa√ß√£o:', error.message);
    return null;
  }
}

async function createOrUpdateAssociation() {
  console.log('\nüîß Criando/atualizando associa√ß√£o "sativar"...');
  
  try {
    const associationData = {
      name: 'Associa√ß√£o Sativar',
      subdomain: 'sativar',
      wordpressUrl: 'https://sativar.com.br',
      wordpressUrlDev: 'https://dev.sativar.com.br',
      wordpressAuth: JSON.stringify({
        apiKey: 'test-api-key',
        username: 'test-user',
        password: 'test-password'
      }),
      publicDisplayName: 'Sativar',
      logoUrl: 'https://sativar.com.br/wp-content/uploads/2023/logo.png',
      welcomeMessage: 'Bem-vindo √† Sativar! Estamos aqui para cuidar da sua sa√∫de com carinho e dedica√ß√£o.',
      isActive: true
    };

    const association = await prisma.association.upsert({
      where: { subdomain: 'sativar' },
      update: {
        ...associationData,
        updatedAt: new Date()
      },
      create: associationData
    });

    console.log('‚úÖ Associa√ß√£o "sativar" criada/atualizada com sucesso:');
    console.log(`   - ID: ${association.id}`);
    console.log(`   - Nome: ${association.name}`);
    console.log(`   - Ativa: ${association.isActive ? '‚úÖ Sim' : '‚ùå N√£o'}`);

    return association;
  } catch (error) {
    console.error('‚ùå Erro ao criar/atualizar associa√ß√£o:', error.message);
    throw error;
  }
}

async function createTestPatient(associationId) {
  console.log('\nüë§ Verificando/criando paciente de teste...');
  
  try {
    const existingPatient = await prisma.patient.findUnique({
      where: { whatsapp: '11987654321' }
    });

    if (existingPatient) {
      console.log('‚úÖ Paciente de teste j√° existe:', existingPatient.name);
      return existingPatient;
    }

    const patient = await prisma.patient.create({
      data: {
        id: 'test-patient-sativar-1',
        name: 'Jo√£o Silva',
        whatsapp: '11987654321',
        email: 'joao.silva@test.com',
        associationId: associationId,
        isActive: true
      }
    });

    console.log('‚úÖ Paciente de teste criado:', patient.name);
    return patient;
  } catch (error) {
    console.error('‚ùå Erro ao criar paciente de teste:', error.message);
    // N√£o falha o processo se n√£o conseguir criar o paciente
    return null;
  }
}

async function verifyFinalState() {
  console.log('\nüîç Verifica√ß√£o final dos dados...');
  
  try {
    const association = await prisma.association.findUnique({
      where: { subdomain: 'sativar' },
      include: {
        Patient: {
          take: 5 // Apenas os primeiros 5 pacientes
        }
      }
    });

    if (!association) {
      console.log('‚ùå ERRO: Associa√ß√£o n√£o encontrada ap√≥s cria√ß√£o!');
      return false;
    }

    console.log('‚úÖ Estado final da associa√ß√£o "sativar":');
    console.log(`   - ID: ${association.id}`);
    console.log(`   - Nome: ${association.name}`);
    console.log(`   - Subdomain: ${association.subdomain}`);
    console.log(`   - Ativa: ${association.isActive ? '‚úÖ Sim' : '‚ùå N√£o'}`);
    console.log(`   - Pacientes associados: ${association.Patient.length}`);
    
    if (association.Patient.length > 0) {
      console.log('   - Pacientes:');
      association.Patient.forEach(patient => {
        console.log(`     ‚Ä¢ ${patient.name} (${patient.whatsapp})`);
      });
    }

    if (!association.isActive) {
      console.log('‚ùå ERRO: Associa√ß√£o n√£o est√° ativa!');
      return false;
    }

    console.log('\n‚úÖ Todos os dados de teste est√£o corretos e prontos para desenvolvimento!');
    return true;
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o final:', error.message);
    return false;
  }
}

async function main() {
  console.log('üöÄ Iniciando verifica√ß√£o e corre√ß√£o dos dados de teste...\n');

  try {
    // 1. Verificar conex√£o com banco
    const connected = await verifyDatabaseConnection();
    if (!connected) {
      process.exit(1);
    }

    // 2. Verificar se associa√ß√£o existe e est√° correta
    const existingAssociation = await verifyAssociationData();

    // 3. Criar ou atualizar associa√ß√£o se necess√°rio
    let association;
    if (!existingAssociation || !existingAssociation.isActive) {
      association = await createOrUpdateAssociation();
    } else {
      association = existingAssociation;
      console.log('\n‚úÖ Associa√ß√£o "sativar" j√° est√° correta, nenhuma altera√ß√£o necess√°ria');
    }

    // 4. Criar paciente de teste se necess√°rio
    await createTestPatient(association.id);

    // 5. Verifica√ß√£o final
    const success = await verifyFinalState();

    if (success) {
      console.log('\nüéâ Processo conclu√≠do com sucesso!');
      console.log('üí° Agora voc√™ pode testar as URLs:');
      console.log('   - http://localhost:9002/ (Hero Section)');
      console.log('   - http://localhost:9002/sativar (P√°gina da associa√ß√£o)');
    } else {
      console.log('\n‚ùå Processo conclu√≠do com erros. Verifique os logs acima.');
      process.exit(1);
    }

  } catch (error) {
    console.error('\n‚ùå Erro fatal durante execu√ß√£o:', error.message);
    console.error('Stack trace:', error.stack);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
    console.log('\nüîå Conex√£o com banco de dados encerrada');
  }
}

// Execute apenas se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = {
  verifyDatabaseConnection,
  verifyAssociationData,
  createOrUpdateAssociation,
  verifyFinalState
};