#!/usr/bin/env node

/**
 * TESTE MANUAL DA FASE 3 - Valida√ß√£o Real da API
 * 
 * Este script testa a API real do SatiZap para verificar se as corre√ß√µes
 * da Fase 3 est√£o funcionando corretamente
 */

const fetch = require('node-fetch');

const SATIZAP_BASE_URL = 'http://localhost:9002';
const TEST_WHATSAPP = '85996201636';
const TEST_SLUG = 'sativar';

console.log('üß™ TESTE MANUAL DA FASE 3 - API REAL');
console.log('='.repeat(60));
console.log();

async function testarApiReal() {
  try {
    console.log('üì± Testando API de valida√ß√£o de WhatsApp...');
    console.log(`   URL: ${SATIZAP_BASE_URL}/api/patients/validate-whatsapp-simple?slug=${TEST_SLUG}`);
    console.log(`   WhatsApp: ${TEST_WHATSAPP}`);
    console.log();

    const response = await fetch(`${SATIZAP_BASE_URL}/api/patients/validate-whatsapp-simple?slug=${TEST_SLUG}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        whatsapp: TEST_WHATSAPP
      })
    });

    console.log(`üìä Status da Resposta: ${response.status}`);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.log('‚ùå ERRO na API:');
      console.log(errorText);
      return false;
    }

    const data = await response.json();
    console.log('‚úÖ Resposta da API:');
    console.log(JSON.stringify(data, null, 2));
    console.log();

    // Analisar resultado
    if (data.status === 'patient_found') {
      console.log('üéâ SUCESSO! Paciente encontrado!');
      console.log(`   Nome: ${data.patientData?.name}`);
      console.log(`   Tipo: ${data.syncType}`);
      console.log(`   Fonte: ${data.patientData?.source}`);
      console.log();
      console.log('‚úÖ Resultado esperado para a interface:');
      console.log('   ‚Ä¢ Tela de confirma√ß√£o com dados do paciente');
      console.log('   ‚Ä¢ Bot√£o "Iniciar Atendimento"');
      console.log('   ‚Ä¢ N√ÉO mostra campos Nome/CPF');
      return true;
      
    } else if (data.status === 'new_patient_step_2') {
      console.log('üìù Paciente n√£o encontrado - Lead capture');
      console.log('   Isso √© normal se o paciente n√£o existir no WordPress');
      console.log();
      console.log('‚úÖ Resultado esperado para a interface:');
      console.log('   ‚Ä¢ Formul√°rio para coletar Nome e CPF');
      console.log('   ‚Ä¢ Processo de captura de lead');
      return true;
      
    } else {
      console.log('‚ùì Status inesperado:', data.status);
      return false;
    }

  } catch (error) {
    console.log('‚ùå ERRO durante o teste:', error.message);
    return false;
  }
}

async function executarTeste() {
  console.log('üöÄ Iniciando teste da API real...');
  console.log();
  
  const sucesso = await testarApiReal();
  
  console.log();
  console.log('üìã INSTRU√á√ïES PARA TESTE MANUAL COMPLETO:');
  console.log('-'.repeat(50));
  console.log(`1. Abra o navegador em: ${SATIZAP_BASE_URL}/${TEST_SLUG}`);
  console.log(`2. Digite o WhatsApp: ${TEST_WHATSAPP}`);
  console.log('3. Clique em "Continuar"');
  console.log('4. Observe o resultado na interface');
  console.log();
  
  if (sucesso) {
    console.log('‚úÖ API FUNCIONANDO CORRETAMENTE!');
    console.log('üéØ A Fase 3 foi implementada com sucesso!');
  } else {
    console.log('‚ùå API COM PROBLEMAS!');
    console.log('üîß Verifique os logs do servidor para mais detalhes');
  }
  
  console.log();
  console.log('üìù Para monitorar logs em tempo real:');
  console.log('   ‚Ä¢ Observe o terminal onde o SatiZap est√° rodando');
  console.log('   ‚Ä¢ Procure por mensagens "[FASE 1 - LOG X]"');
  console.log('   ‚Ä¢ Verifique se a URL constru√≠da est√° correta');
  
  return sucesso;
}

// Executar teste
executarTeste()
  .then(success => {
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('‚ùå ERRO durante execu√ß√£o:', error);
    process.exit(1);
  });