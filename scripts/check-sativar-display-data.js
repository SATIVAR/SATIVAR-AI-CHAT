#!/usr/bin/env node

/**
 * Script para verificar os dados de exibi√ß√£o p√∫blica da associa√ß√£o SATIVAR
 */

const { PrismaClient } = require('@prisma/client');

async function checkSativarDisplayData() {
  console.log('üîç Verificando dados de exibi√ß√£o p√∫blica da SATIVAR...\n');
  
  const prisma = new PrismaClient();
  
  try {
    const association = await prisma.association.findUnique({
      where: { subdomain: 'sativar' },
      select: {
        id: true,
        name: true,
        subdomain: true,
        isActive: true,
        publicDisplayName: true,
        logoUrl: true,
        welcomeMessage: true,
        descricaoPublica: true,
        createdAt: true,
        updatedAt: true
      }
    });
    
    if (!association) {
      console.log('‚ùå Associa√ß√£o SATIVAR n√£o encontrada');
      return;
    }
    
    console.log('‚úÖ Associa√ß√£o SATIVAR encontrada:');
    console.log(`   ID: ${association.id}`);
    console.log(`   Nome: ${association.name}`);
    console.log(`   Subdomain: ${association.subdomain}`);
    console.log(`   Ativa: ${association.isActive}`);
    console.log('');
    
    console.log('üìã Campos de Exibi√ß√£o P√∫blica:');
    console.log(`   publicDisplayName: ${association.publicDisplayName || '‚ùå N√ÉO DEFINIDO'}`);
    console.log(`   logoUrl: ${association.logoUrl || '‚ùå N√ÉO DEFINIDO'}`);
    console.log(`   welcomeMessage: ${association.welcomeMessage || '‚ùå N√ÉO DEFINIDO'}`);
    console.log(`   descricaoPublica: ${association.descricaoPublica || '‚ùå N√ÉO DEFINIDO'}`);
    console.log('');
    
    console.log('üìÖ Datas:');
    console.log(`   Criado em: ${association.createdAt}`);
    console.log(`   Atualizado em: ${association.updatedAt}`);
    
    // Diagn√≥stico do problema
    console.log('\nüîß DIAGN√ìSTICO DO PROBLEMA:');
    
    const missingFields = [];
    if (!association.publicDisplayName) missingFields.push('publicDisplayName');
    if (!association.logoUrl) missingFields.push('logoUrl');
    if (!association.welcomeMessage) missingFields.push('welcomeMessage');
    
    if (missingFields.length > 0) {
      console.log('‚ùå PROBLEMA IDENTIFICADO:');
      console.log(`   Os seguintes campos est√£o vazios: ${missingFields.join(', ')}`);
      console.log('   Isso explica por que o card est√° mostrando dados gen√©ricos do SatiZap');
      console.log('   em vez dos dados espec√≠ficos da SATIVAR.');
      console.log('');
      console.log('üí° SOLU√á√ÉO:');
      console.log('   1. Preencher os campos de exibi√ß√£o p√∫blica da associa√ß√£o SATIVAR');
      console.log('   2. Ou ajustar o c√≥digo para usar fallbacks apropriados');
    } else {
      console.log('‚úÖ Todos os campos de exibi√ß√£o p√∫blica est√£o preenchidos');
      console.log('   O problema pode estar na l√≥gica de carregamento dos dados');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar a verifica√ß√£o
checkSativarDisplayData().catch(console.error);