#!/usr/bin/env node

/**
 * FASE 3: Valida√ß√£o Completa do Fluxo End-to-End
 * 
 * Este script valida se todas as corre√ß√µes foram implementadas
 * e se o fluxo completo est√° funcionando corretamente.
 */

const fetch = require('node-fetch');

const SATIZAP_BASE_URL = 'http://localhost:9002';
const WORDPRESS_BASE_URL = 'https://teste.sativar.com.br';
const TEST_WHATSAPP = '85996201636';
const TEST_SLUG = 'sativar';

// Credenciais WordPress (ajustar conforme necess√°rio)
const WORDPRESS_USERNAME = 'seu_usuario';
const WORDPRESS_PASSWORD = 'sua_senha_de_aplicacao';

async function executeFase3Validacao() {
  console.log('='.repeat(80));
  console.log('FASE 3: VALIDA√á√ÉO COMPLETA DO FLUXO END-TO-END');
  console.log('='.repeat(80));
  console.log();
  
  let allTestsPassed = true;
  
  // TESTE 1: Verificar se o WordPress est√° respondendo corretamente
  console.log('üîÑ TESTE 1: Valida√ß√£o do WordPress Smart Search');
  console.log('-'.repeat(50));
  
  try {
    const credentials = Buffer.from(`${WORDPRESS_USERNAME}:${WORDPRESS_PASSWORD}`).toString('base64');
    const testUrl = `${WORDPRESS_BASE_URL}/wp-json/sativar/v1/test-phone-search?telefone=${TEST_WHATSAPP}`;
    
    console.log(`   URL: ${testUrl}`);
    
    const wpResponse = await fetch(testUrl, {
      headers: {
        'Authorization': `Basic ${credentials}`,
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
    
    if (wpResponse.ok) {
      const wpData = await wpResponse.json();
      console.log(`   Status: ${wpResponse.status} ‚úÖ`);
      console.log(`   Test Status: ${wpData.test_status}`);
      console.log(`   Results Count: ${wpData.results_count}`);
      console.log(`   Message: ${wpData.message}`);
      
      if (wpData.test_status === 'SUCCESS' && wpData.results_count > 0) {
        console.log('   ‚úÖ TESTE 1 PASSOU: WordPress encontrou o paciente!');
      } else {
        console.log('   ‚ùå TESTE 1 FALHOU: WordPress n√£o encontrou o paciente');
        allTestsPassed = false;
      }
    } else {
      console.log(`   ‚ùå TESTE 1 FALHOU: Status ${wpResponse.status}`);
      allTestsPassed = false;
    }
    
  } catch (error) {
    console.log(`   ‚ùå TESTE 1 FALHOU: ${error.message}`);
    allTestsPassed = false;
  }
  
  console.log();
  
  // TESTE 2: Verificar se o SatiZap est√° processando corretamente
  console.log('üîÑ TESTE 2: Valida√ß√£o do SatiZap Backend');
  console.log('-'.repeat(50));
  
  try {
    const satizapResponse = await fetch(`${SATIZAP_BASE_URL}/api/patients/validate-whatsapp-simple?slug=${TEST_SLUG}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        whatsapp: TEST_WHATSAPP
      })
    });
    
    console.log(`   Status: ${satizapResponse.status}`);
    
    if (satizapResponse.ok) {
      const satizapData = await satizapResponse.json();
      console.log(`   Response Status: ${satizapData.status}`);
      
      if (satizapData.status === 'patient_found') {
        console.log('   ‚úÖ TESTE 2 PASSOU: SatiZap encontrou o paciente!');
        console.log(`   üìã Nome: ${satizapData.patientData?.name}`);
        console.log(`   üìã Tipo: ${satizapData.syncType}`);
        console.log(`   üìã Fonte: ${satizapData.patientData?.source}`);
      } else if (satizapData.status === 'new_patient_step_2') {
        console.log('   ‚ùå TESTE 2 FALHOU: SatiZap n√£o encontrou o paciente');
        console.log('   üí° Isso indica que o WordPress ainda n√£o est√° retornando dados');
        allTestsPassed = false;
      } else {
        console.log(`   ‚ùì TESTE 2 INCONCLUSIVO: Status inesperado ${satizapData.status}`);
        allTestsPassed = false;
      }
    } else {
      console.log(`   ‚ùå TESTE 2 FALHOU: Status ${satizapResponse.status}`);
      allTestsPassed = false;
    }
    
  } catch (error) {
    console.log(`   ‚ùå TESTE 2 FALHOU: ${error.message}`);
    allTestsPassed = false;
  }
  
  console.log();
  
  // TESTE 3: Verificar se a interface est√° funcionando
  console.log('üîÑ TESTE 3: Valida√ß√£o da Interface (Simula√ß√£o)');
  console.log('-'.repeat(50));
  
  console.log('   üìù Para testar a interface completa:');
  console.log(`   1. Acesse: ${SATIZAP_BASE_URL}/${TEST_SLUG}`);
  console.log(`   2. Digite o WhatsApp: ${TEST_WHATSAPP}`);
  console.log('   3. Clique em "Continuar"');
  console.log();
  
  if (allTestsPassed) {
    console.log('   ‚úÖ Se os testes 1 e 2 passaram, a interface deve mostrar:');
    console.log('      ‚Ä¢ Tela de confirma√ß√£o com dados do paciente');
    console.log('      ‚Ä¢ Bot√£o "Iniciar Atendimento"');
    console.log('      ‚Ä¢ N√ÉO deve mostrar campos Nome/CPF');
  } else {
    console.log('   ‚ö†Ô∏è  Como os testes anteriores falharam, a interface mostrar√°:');
    console.log('      ‚Ä¢ Formul√°rio de Nome/CPF (captura de lead)');
    console.log('      ‚Ä¢ Isso confirma que o problema ainda n√£o foi resolvido');
  }
  
  console.log();
  
  // RESULTADO FINAL
  console.log('üìä RESULTADO FINAL');
  console.log('='.repeat(50));
  
  if (allTestsPassed) {
    console.log('üéâ SUCESSO! Todas as corre√ß√µes foram implementadas com sucesso!');
    console.log();
    console.log('‚úÖ O que foi corrigido:');
    console.log('   ‚Ä¢ WordPress agora encontra pacientes independente da formata√ß√£o');
    console.log('   ‚Ä¢ SatiZap processa corretamente a resposta do WordPress');
    console.log('   ‚Ä¢ Interface mostra tela de confirma√ß√£o para pacientes existentes');
    console.log();
    console.log('üéØ Pr√≥ximos passos:');
    console.log('   ‚Ä¢ Teste manualmente a interface web');
    console.log('   ‚Ä¢ Verifique se o chat funciona ap√≥s "Iniciar Atendimento"');
    console.log('   ‚Ä¢ Considere implementar testes automatizados');
    
  } else {
    console.log('‚ùå FALHA: Ainda h√° problemas que precisam ser resolvidos');
    console.log();
    console.log('üîß A√ß√µes necess√°rias:');
    
    if (WORDPRESS_USERNAME === 'seu_usuario') {
      console.log('   1. ‚ö†Ô∏è  Configure as credenciais do WordPress neste script');
    }
    
    console.log('   2. üìã Verifique se o c√≥digo PHP foi adicionado ao plugin WordPress');
    console.log('   3. üîÑ Reative o plugin WordPress ap√≥s adicionar o c√≥digo');
    console.log('   4. üìä Execute novamente este script ap√≥s as corre√ß√µes');
    console.log();
    console.log('üí° Dicas de troubleshooting:');
    console.log('   ‚Ä¢ Verifique os logs do WordPress (wp-content/debug.log)');
    console.log('   ‚Ä¢ Verifique os logs do SatiZap no terminal');
    console.log('   ‚Ä¢ Teste os endpoints individualmente com Postman/Insomnia');
  }
  
  console.log();
  console.log('='.repeat(80));
  
  return allTestsPassed;
}

// Executar valida√ß√£o
executeFase3Validacao()
  .then(success => {
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('‚ùå ERRO durante a valida√ß√£o:', error);
    process.exit(1);
  });