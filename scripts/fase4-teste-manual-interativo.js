#!/usr/bin/env node

/**
 * FASE 4: TESTE MANUAL INTERATIVO
 * 
 * Este script guia o usu√°rio atrav√©s de testes manuais interativos
 * para validar a experi√™ncia completa do usu√°rio em cen√°rios reais.
 */

const readline = require('readline');
const fetch = require('node-fetch');

const SATIZAP_BASE_URL = process.env.SATIZAP_BASE_URL || 'http://localhost:9002';
const TEST_SLUG = process.env.TEST_SLUG || 'sativar';

class InteractiveTestSuite {
  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    this.testResults = [];
    this.currentTest = 0;
  }

  async question(prompt) {
    return new Promise((resolve) => {
      this.rl.question(prompt, resolve);
    });
  }

  log(message, level = 'info') {
    const colors = {
      info: '\x1b[36m',    // Cyan
      success: '\x1b[32m', // Green
      error: '\x1b[31m',   // Red
      warning: '\x1b[33m', // Yellow
      reset: '\x1b[0m'     // Reset
    };
    
    const color = colors[level] || colors.info;
    console.log(`${color}${message}${colors.reset}`);
  }

  async waitForEnter(message = 'Pressione ENTER para continuar...') {
    await this.question(`\n${message}`);
  }

  async recordTestResult(testName, description) {
    this.log(`\nüìã TESTE ${++this.currentTest}: ${testName}`, 'info');
    this.log(`üìù ${description}`, 'info');
    
    const result = await this.question('\n‚úÖ O teste passou? (s/n): ');
    const passed = result.toLowerCase() === 's' || result.toLowerCase() === 'sim';
    
    let details = '';
    if (!passed) {
      details = await this.question('üìù Descreva o problema encontrado: ');
    }
    
    this.testResults.push({
      name: testName,
      description,
      passed,
      details,
      timestamp: new Date().toISOString()
    });
    
    this.log(passed ? '‚úÖ PASSOU' : '‚ùå FALHOU', passed ? 'success' : 'error');
    return passed;
  }

  // CEN√ÅRIO 1: TESTE DO RESPONS√ÅVEL
  async testResponsibleScenario() {
    this.log('\nüë• CEN√ÅRIO 1: TESTE DO RESPONS√ÅVEL', 'info');
    this.log('=' .repeat(60), 'info');
    this.log('Neste cen√°rio, voc√™ testar√° como respons√°vel (Carolina) falando pelo paciente (Lucas)', 'info');
    
    await this.waitForEnter();
    
    // Passo 1: Acessar a p√°gina
    this.log(`\nüåê PASSO 1: Acesse ${SATIZAP_BASE_URL}/${TEST_SLUG}`, 'info');
    await this.recordTestResult(
      'Acesso √† P√°gina Principal',
      'A p√°gina carregou corretamente? Voc√™ v√™ o formul√°rio de WhatsApp?'
    );
    
    // Passo 2: Inserir WhatsApp
    this.log('\nüì± PASSO 2: Digite o WhatsApp: 85996201636', 'info');
    this.log('Este n√∫mero deve estar cadastrado no WordPress como respons√°vel', 'warning');
    await this.recordTestResult(
      'Inser√ß√£o do WhatsApp',
      'O campo aceita o n√∫mero? A formata√ß√£o est√° correta? O bot√£o "Continuar" est√° habilitado?'
    );
    
    // Passo 3: Clique em Continuar
    this.log('\nüîÑ PASSO 3: Clique em "Continuar"', 'info');
    await this.recordTestResult(
      'Valida√ß√£o do WhatsApp',
      'Apareceu um loading? A valida√ß√£o foi executada? Voc√™ foi direcionado para a tela de confirma√ß√£o?'
    );
    
    // Passo 4: Verificar tela de confirma√ß√£o
    this.log('\n‚úÖ PASSO 4: Verifique a tela de confirma√ß√£o', 'info');
    this.log('Voc√™ deve ver:', 'info');
    this.log('‚Ä¢ "Ol√°, Carolina! Voc√™ est√° iniciando o atendimento para Lucas"', 'info');
    this.log('‚Ä¢ Badge "Atendimento via Respons√°vel"', 'info');
    this.log('‚Ä¢ Dados do paciente (Lucas) e do respons√°vel (Carolina)', 'info');
    this.log('‚Ä¢ Alerta explicativo sobre o contexto', 'info');
    
    await this.recordTestResult(
      'Tela de Confirma√ß√£o - Respons√°vel',
      'A mensagem est√° contextualizada? Os dados est√£o corretos? O alerta explicativo aparece?'
    );
    
    // Passo 5: Iniciar atendimento
    this.log('\nüí¨ PASSO 5: Clique em "Iniciar Atendimento para Lucas"', 'info');
    await this.recordTestResult(
      'Iniciar Atendimento - Respons√°vel',
      'O bot√£o tem o texto correto? O chat foi iniciado? A mensagem de boas-vindas est√° contextualizada?'
    );
    
    // Passo 6: Verificar mensagem de boas-vindas
    this.log('\nüëã PASSO 6: Verifique a mensagem de boas-vindas da IA', 'info');
    this.log('A mensagem deve:', 'info');
    this.log('‚Ä¢ Se dirigir a voc√™ (Carolina) como respons√°vel', 'info');
    this.log('‚Ä¢ Mencionar que o atendimento √© para Lucas', 'info');
    this.log('‚Ä¢ Usar linguagem apropriada para respons√°vel', 'info');
    
    await this.recordTestResult(
      'Mensagem de Boas-vindas - IA Contextual',
      'A IA se dirige corretamente a voc√™ como respons√°vel? Menciona o paciente Lucas?'
    );
    
    // Passo 7: Teste de conversa
    this.log('\nüí¨ PASSO 7: Teste uma conversa', 'info');
    this.log('Digite: "Preciso de produtos para ansiedade do Lucas"', 'info');
    
    await this.recordTestResult(
      'Conversa Contextual - Respons√°vel',
      'A IA responde se dirigindo a voc√™? Faz perguntas sobre o Lucas? A linguagem est√° apropriada?'
    );
  }

  // CEN√ÅRIO 2: TESTE DO PACIENTE DIRETO
  async testDirectPatientScenario() {
    this.log('\nüë§ CEN√ÅRIO 2: TESTE DO PACIENTE DIRETO', 'info');
    this.log('=' .repeat(60), 'info');
    this.log('Neste cen√°rio, voc√™ testar√° como paciente falando diretamente', 'info');
    
    await this.waitForEnter();
    
    // Passo 1: Acessar nova sess√£o
    this.log('\nüåê PASSO 1: Abra uma nova aba/sess√£o inc√≥gnita', 'info');
    this.log(`Acesse: ${SATIZAP_BASE_URL}/${TEST_SLUG}`, 'info');
    await this.recordTestResult(
      'Nova Sess√£o - Paciente Direto',
      'Nova sess√£o iniciada? Formul√°rio limpo aparece?'
    );
    
    // Passo 2: Inserir WhatsApp de paciente direto
    this.log('\nüì± PASSO 2: Digite um WhatsApp de paciente direto', 'info');
    this.log('Use: 11987654321 (deve estar cadastrado como paciente direto)', 'warning');
    await this.recordTestResult(
      'WhatsApp Paciente Direto',
      'Campo aceita o n√∫mero? Formata√ß√£o correta?'
    );
    
    // Passo 3: Valida√ß√£o
    this.log('\nüîÑ PASSO 3: Clique em "Continuar"', 'info');
    await this.recordTestResult(
      'Valida√ß√£o Paciente Direto',
      'Loading aparece? Direcionado para confirma√ß√£o?'
    );
    
    // Passo 4: Verificar confirma√ß√£o de paciente direto
    this.log('\n‚úÖ PASSO 4: Verifique a tela de confirma√ß√£o', 'info');
    this.log('Voc√™ deve ver:', 'info');
    this.log('‚Ä¢ "Bem-vindo(a) de volta, [Nome do Paciente]!"', 'info');
    this.log('‚Ä¢ Badge "Atendimento Direto"', 'info');
    this.log('‚Ä¢ Apenas dados do paciente (sem respons√°vel)', 'info');
    this.log('‚Ä¢ SEM alerta de contexto de respons√°vel', 'info');
    
    await this.recordTestResult(
      'Confirma√ß√£o Paciente Direto',
      'Mensagem correta? Sem informa√ß√µes de respons√°vel? Interface apropriada?'
    );
    
    // Passo 5: Iniciar atendimento direto
    this.log('\nüí¨ PASSO 5: Clique em "Iniciar Atendimento"', 'info');
    await this.recordTestResult(
      'Iniciar Atendimento Direto',
      'Bot√£o tem texto simples? Chat iniciado corretamente?'
    );
    
    // Passo 6: Verificar mensagem de boas-vindas direta
    this.log('\nüëã PASSO 6: Verifique a mensagem de boas-vindas', 'info');
    this.log('A mensagem deve:', 'info');
    this.log('‚Ä¢ Se dirigir diretamente ao paciente', 'info');
    this.log('‚Ä¢ Usar "voc√™" em vez de terceira pessoa', 'info');
    this.log('‚Ä¢ N√£o mencionar respons√°vel', 'info');
    
    await this.recordTestResult(
      'Boas-vindas Paciente Direto',
      'IA se dirige diretamente ao paciente? Usa "voc√™"? Sem men√ß√£o a respons√°vel?'
    );
    
    // Passo 7: Teste de conversa direta
    this.log('\nüí¨ PASSO 7: Teste uma conversa', 'info');
    this.log('Digite: "Preciso de produtos para ansiedade"', 'info');
    
    await this.recordTestResult(
      'Conversa Direta',
      'IA responde diretamente a voc√™? Usa "voc√™" consistentemente? Linguagem apropriada?'
    );
  }

  // CEN√ÅRIO 3: TESTE DE NOVO PACIENTE (LEAD)
  async testNewPatientScenario() {
    this.log('\nüÜï CEN√ÅRIO 3: TESTE DE NOVO PACIENTE (LEAD)', 'info');
    this.log('=' .repeat(60), 'info');
    this.log('Neste cen√°rio, voc√™ testar√° o cadastro de um novo paciente', 'info');
    
    await this.waitForEnter();
    
    // Passo 1: Nova sess√£o
    this.log('\nüåê PASSO 1: Abra uma nova aba/sess√£o', 'info');
    this.log(`Acesse: ${SATIZAP_BASE_URL}/${TEST_SLUG}`, 'info');
    await this.recordTestResult(
      'Nova Sess√£o - Lead',
      'Nova sess√£o limpa iniciada?'
    );
    
    // Passo 2: WhatsApp n√£o cadastrado
    this.log('\nüì± PASSO 2: Digite um WhatsApp N√ÉO cadastrado', 'info');
    this.log('Use: 21999888777 (deve ser um n√∫mero novo)', 'warning');
    await this.recordTestResult(
      'WhatsApp Novo',
      'Campo aceita o n√∫mero? Formata√ß√£o correta?'
    );
    
    // Passo 3: Valida√ß√£o de novo paciente
    this.log('\nüîÑ PASSO 3: Clique em "Continuar"', 'info');
    await this.recordTestResult(
      'Valida√ß√£o Novo Paciente',
      'Loading aparece? Direcionado para formul√°rio de dados?'
    );
    
    // Passo 4: Formul√°rio de dados
    this.log('\nüìù PASSO 4: Preencha o formul√°rio de dados', 'info');
    this.log('‚Ä¢ Nome: Jo√£o Santos', 'info');
    this.log('‚Ä¢ CPF: 11122233344', 'info');
    this.log('‚Ä¢ WhatsApp deve estar preenchido e desabilitado', 'info');
    
    await this.recordTestResult(
      'Formul√°rio de Dados',
      'Campos aparecem corretamente? WhatsApp preenchido e desabilitado? Valida√ß√£o funciona?'
    );
    
    // Passo 5: Finalizar cadastro
    this.log('\n‚úÖ PASSO 5: Clique em "Iniciar Atendimento"', 'info');
    await this.recordTestResult(
      'Finalizar Cadastro Lead',
      'Loading aparece? Cadastro √© finalizado? Chat √© iniciado?'
    );
    
    // Passo 6: Verificar mensagem para lead
    this.log('\nüëã PASSO 6: Verifique a mensagem de boas-vindas', 'info');
    this.log('A mensagem deve:', 'info');
    this.log('‚Ä¢ Dar boas-vindas como novo usu√°rio', 'info');
    this.log('‚Ä¢ Explicar sobre a associa√ß√£o', 'info');
    this.log('‚Ä¢ Ser apropriada para um lead', 'info');
    
    await this.recordTestResult(
      'Boas-vindas Lead',
      'Mensagem apropriada para novo usu√°rio? Explica sobre a associa√ß√£o?'
    );
  }

  // TESTES DE RESPONSIVIDADE
  async testResponsiveness() {
    this.log('\nüì± TESTE DE RESPONSIVIDADE', 'info');
    this.log('=' .repeat(60), 'info');
    this.log('Teste a interface em diferentes tamanhos de tela', 'info');
    
    await this.waitForEnter();
    
    // Mobile
    this.log('\nüì± PASSO 1: Teste em modo mobile', 'info');
    this.log('‚Ä¢ Abra as ferramentas de desenvolvedor (F12)', 'info');
    this.log('‚Ä¢ Ative o modo responsivo', 'info');
    this.log('‚Ä¢ Selecione iPhone ou Android', 'info');
    
    await this.recordTestResult(
      'Layout Mobile',
      'Interface se adapta bem? Bot√µes s√£o clic√°veis? Texto leg√≠vel?'
    );
    
    // Tablet
    this.log('\nüì± PASSO 2: Teste em modo tablet', 'info');
    this.log('‚Ä¢ Selecione iPad ou tablet Android', 'info');
    
    await this.recordTestResult(
      'Layout Tablet',
      'Interface aproveita bem o espa√ßo? Elementos bem posicionados?'
    );
    
    // Desktop
    this.log('\nüñ•Ô∏è  PASSO 3: Teste em desktop', 'info');
    this.log('‚Ä¢ Volte ao modo desktop', 'info');
    this.log('‚Ä¢ Teste em diferentes resolu√ß√µes', 'info');
    
    await this.recordTestResult(
      'Layout Desktop',
      'Interface bem centralizada? Aproveita o espa√ßo dispon√≠vel?'
    );
  }

  // TESTES DE ACESSIBILIDADE
  async testAccessibility() {
    this.log('\n‚ôø TESTE DE ACESSIBILIDADE', 'info');
    this.log('=' .repeat(60), 'info');
    this.log('Teste a acessibilidade da interface', 'info');
    
    await this.waitForEnter();
    
    // Navega√ß√£o por teclado
    this.log('\n‚å®Ô∏è  PASSO 1: Navega√ß√£o por teclado', 'info');
    this.log('‚Ä¢ Use apenas o teclado (Tab, Enter, Esc)', 'info');
    this.log('‚Ä¢ Navegue por todos os elementos', 'info');
    this.log('‚Ä¢ Preencha e envie o formul√°rio', 'info');
    
    await this.recordTestResult(
      'Navega√ß√£o por Teclado',
      'Todos os elementos s√£o acess√≠veis via teclado? Ordem l√≥gica? Focus vis√≠vel?'
    );
    
    // Modo escuro
    this.log('\nüåô PASSO 2: Modo escuro', 'info');
    this.log('‚Ä¢ Procure por um bot√£o de altern√¢ncia de tema', 'info');
    this.log('‚Ä¢ Teste a interface no modo escuro', 'info');
    
    await this.recordTestResult(
      'Modo Escuro',
      'Modo escuro dispon√≠vel? Contraste adequado? Todos os elementos vis√≠veis?'
    );
    
    // Zoom
    this.log('\nüîç PASSO 3: Teste de zoom', 'info');
    this.log('‚Ä¢ Aumente o zoom para 200% (Ctrl/Cmd + +)', 'info');
    this.log('‚Ä¢ Teste a funcionalidade', 'info');
    
    await this.recordTestResult(
      'Zoom 200%',
      'Interface funciona bem com zoom? Texto leg√≠vel? Bot√µes clic√°veis?'
    );
  }

  // RELAT√ìRIO FINAL
  async generateFinalReport() {
    this.log('\nüìä RELAT√ìRIO FINAL - TESTE MANUAL INTERATIVO', 'info');
    this.log('=' .repeat(80), 'info');
    
    const totalTests = this.testResults.length;
    const passedTests = this.testResults.filter(test => test.passed).length;
    const failedTests = totalTests - passedTests;
    const successRate = totalTests > 0 ? ((passedTests / totalTests) * 100).toFixed(1) : 0;
    
    this.log(`üìà Total de testes: ${totalTests}`, 'info');
    this.log(`‚úÖ Testes aprovados: ${passedTests}`, 'success');
    this.log(`‚ùå Testes falharam: ${failedTests}`, failedTests > 0 ? 'error' : 'info');
    this.log(`üìä Taxa de sucesso: ${successRate}%`, successRate >= 90 ? 'success' : 'warning');
    
    // Testes que falharam
    if (failedTests > 0) {
      this.log('\n‚ùå TESTES QUE FALHARAM:', 'error');
      this.testResults
        .filter(test => !test.passed)
        .forEach(test => {
          this.log(`‚Ä¢ ${test.name}: ${test.details}`, 'error');
        });
    }
    
    // Recomenda√ß√µes
    this.log('\nüí° RECOMENDA√á√ïES:', 'info');
    
    if (successRate >= 95) {
      this.log('üéâ EXCELENTE! A interface est√° funcionando perfeitamente!', 'success');
      this.log('‚úÖ Experi√™ncia do usu√°rio otimizada para todos os cen√°rios.', 'success');
      this.log('üöÄ Sistema pronto para uso em produ√ß√£o!', 'success');
    } else if (successRate >= 80) {
      this.log('üëç BOM! A maioria dos testes passou, mas h√° melhorias a fazer.', 'warning');
      this.log('üîß Corrija os problemas identificados nos testes que falharam.', 'warning');
      this.log('üß™ Execute novamente ap√≥s as corre√ß√µes.', 'warning');
    } else {
      this.log('‚ö†Ô∏è  ATEN√á√ÉO! Muitos problemas foram identificados.', 'error');
      this.log('üîß Revise e corrija os problemas antes de prosseguir.', 'error');
      this.log('üë• Considere testes adicionais com usu√°rios reais.', 'error');
    }
    
    // Salvar relat√≥rio
    const reportData = {
      timestamp: new Date().toISOString(),
      totalTests,
      passedTests,
      failedTests,
      successRate: parseFloat(successRate),
      tests: this.testResults
    };
    
    const fs = require('fs').promises;
    const reportPath = `scripts/relatorio-teste-manual-${Date.now()}.json`;
    
    try {
      await fs.writeFile(reportPath, JSON.stringify(reportData, null, 2));
      this.log(`\nüíæ Relat√≥rio salvo em: ${reportPath}`, 'info');
    } catch (error) {
      this.log(`\n‚ö†Ô∏è  Erro ao salvar relat√≥rio: ${error.message}`, 'warning');
    }
    
    return successRate >= 90;
  }

  // M√âTODO PRINCIPAL
  async runInteractiveTests() {
    this.log('üß™ TESTE MANUAL INTERATIVO - FASE 4', 'info');
    this.log('Sistema: SatiZap - Valida√ß√£o Manual Completa', 'info');
    this.log(`Ambiente: ${SATIZAP_BASE_URL}`, 'info');
    this.log('=' .repeat(80), 'info');
    
    this.log('\nüìã INSTRU√á√ïES:', 'info');
    this.log('‚Ä¢ Este teste guiar√° voc√™ atrav√©s de cen√°rios reais', 'info');
    this.log('‚Ä¢ Siga as instru√ß√µes cuidadosamente', 'info');
    this.log('‚Ä¢ Responda honestamente se cada teste passou ou falhou', 'info');
    this.log('‚Ä¢ Descreva problemas encontrados quando solicitado', 'info');
    
    const startTest = await this.question('\nüöÄ Deseja iniciar os testes? (s/n): ');
    if (startTest.toLowerCase() !== 's' && startTest.toLowerCase() !== 'sim') {
      this.log('Teste cancelado pelo usu√°rio.', 'warning');
      this.rl.close();
      return false;
    }
    
    try {
      // Executar todos os cen√°rios de teste
      await this.testResponsibleScenario();
      await this.testDirectPatientScenario();
      await this.testNewPatientScenario();
      await this.testResponsiveness();
      await this.testAccessibility();
      
      // Gerar relat√≥rio final
      const success = await this.generateFinalReport();
      
      this.log('\nüéØ TESTE MANUAL CONCLU√çDO!', 'success');
      this.log('Obrigado por testar o sistema SatiZap.', 'info');
      
      return success;
      
    } catch (error) {
      this.log(`‚ùå ERRO durante o teste: ${error.message}`, 'error');
      return false;
    } finally {
      this.rl.close();
    }
  }
}

// Executar teste se chamado diretamente
if (require.main === module) {
  const tester = new InteractiveTestSuite();
  
  tester.runInteractiveTests()
    .then(success => {
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('‚ùå ERRO FATAL:', error);
      process.exit(1);
    });
}

module.exports = { InteractiveTestSuite };