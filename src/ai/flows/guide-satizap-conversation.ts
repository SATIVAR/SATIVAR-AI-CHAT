import { ai } from '@/ai/genkit';
import { z } from 'zod';
import { Patient, ConversationMessage, DynamicComponentData, ApiConfig, Association } from '@/lib/types';
import { buscarProdutosTool } from '@/ai/tools/buscar-produtos';
import { criarPedidoTool } from '@/ai/tools/criar-pedido';
import { findOrCreatePatientTool } from '@/ai/tools/find-or-create-patient';
import { getContext } from '@/lib/services/context-loader.service';
import { hybridAIOrchestrator, HybridAIInput } from './hybrid-ai-orchestrator';
import { getConversationState, initializeConversationState } from '@/lib/services/conversation-state.service';

/**
 * FASE 3: Fun√ß√£o aprimorada para construir contexto do perfil completo do paciente
 * Injeta dados contextuais detalhados para personalizar a conversa
 * FASE 3: Inclui l√≥gica avan√ßada de "Interlocutor" com instru√ß√µes espec√≠ficas para IA
 */
function buildPatientProfileContext(patient: Patient): string {
  let context = `\n\n=== PERFIL COMPLETO DO PACIENTE (FASE 3) ===\n`;
  
  // Dados b√°sicos
  context += `Nome: ${patient.name}\n`;
  context += `WhatsApp: ${patient.whatsapp}\n`;
  context += `Status: ${patient.status}\n`;
  
  if (patient.email) {
    context += `Email: ${patient.email}\n`;
  }
  
  // Dados ACF (Advanced Custom Fields) sincronizados do WordPress
  if (patient.cpf) {
    context += `CPF: ${patient.cpf}\n`;
  }
  
  if (patient.tipo_associacao) {
    context += `Tipo de Associa√ß√£o: ${patient.tipo_associacao}\n`;
  }
  
  if (patient.nome_responsavel) {
    context += `Nome do Respons√°vel: ${patient.nome_responsavel}\n`;
  }
  
  if (patient.cpf_responsavel) {
    context += `CPF do Respons√°vel: ${patient.cpf_responsavel}\n`;
  }
  
  if (patient.wordpress_id) {
    context += `ID no WordPress: ${patient.wordpress_id}\n`;
  }
  
  // FASE 3: L√ìGICA AVAN√áADA DE INTERLOCUTOR (Paciente vs. Respons√°vel)
  const isResponsibleScenario = patient.tipo_associacao === 'assoc_respon' && patient.nome_responsavel;
  const interlocutorName = isResponsibleScenario ? patient.nome_responsavel : patient.name;
  const patientName = patient.name;
  
  context += `\n=== CONTEXTO AVAN√áADO DO INTERLOCUTOR (FASE 3) ===\n`;
  
  if (isResponsibleScenario) {
    context += `üîπ CEN√ÅRIO: RESPONS√ÅVEL FALANDO PELO PACIENTE\n`;
    context += `‚Ä¢ Interlocutor (quem est√° digitando): ${interlocutorName}\n`;
    context += `‚Ä¢ Paciente (para quem √© o atendimento): ${patientName}\n`;
    context += `‚Ä¢ Tipo de atendimento: Via Respons√°vel\n`;
    context += `\n=== INSTRU√á√ïES CR√çTICAS PARA RESPONS√ÅVEL (FASE 3) ===\n`;
    context += `‚Ä¢ SEMPRE se dirija ao respons√°vel "${interlocutorName}" diretamente usando "voc√™"\n`;
    context += `‚Ä¢ SEMPRE se refira ao paciente "${patientName}" na terceira pessoa\n`;
    context += `‚Ä¢ EXEMPLOS CORRETOS:\n`;
    context += `  - "Como o(a) ${patientName} est√° se sentindo hoje?"\n`;
    context += `  - "Que sintomas o(a) ${patientName} tem apresentado?"\n`;
    context += `  - "Recomendo que ${patientName} comece com esta dosagem..."\n`;
    context += `  - "Voc√™ pode administrar este produto ao ${patientName} da seguinte forma..."\n`;
    context += `‚Ä¢ EXEMPLOS INCORRETOS (NUNCA USE):\n`;
    context += `  - "Como voc√™ est√° se sentindo?" (deve ser "Como o(a) ${patientName} est√° se sentindo?")\n`;
    context += `  - "Que sintomas voc√™ tem?" (deve ser "Que sintomas o(a) ${patientName} tem?")\n`;
    context += `‚Ä¢ Ao criar pedidos, confirme: "Os dados de entrega s√£o do paciente ${patientName}, correto?"\n`;
    context += `‚Ä¢ Mantenha o respons√°vel informado: "Vou explicar como voc√™ deve administrar isso ao ${patientName}"\n`;
    context += `‚Ä¢ Reconhe√ßa o papel: "Entendo que voc√™ est√° cuidando do ${patientName}. Como posso ajud√°-lo?"\n`;
    context += `‚Ä¢ Para dosagem: "Oriente ${patientName} a come√ßar com..." ou "Voc√™ pode dar ao ${patientName}..."\n`;
  } else {
    context += `üîπ CEN√ÅRIO: PACIENTE FALANDO DIRETAMENTE\n`;
    context += `‚Ä¢ Interlocutor (quem est√° digitando): ${interlocutorName}\n`;
    context += `‚Ä¢ Paciente (mesmo que o interlocutor): ${patientName}\n`;
    context += `‚Ä¢ Tipo de atendimento: Direto\n`;
    context += `\n=== INSTRU√á√ïES ESPEC√çFICAS PARA PACIENTE DIRETO (FASE 3) ===\n`;
    context += `‚Ä¢ Se dirija diretamente ao paciente usando "voc√™"\n`;
    context += `‚Ä¢ Use linguagem direta e pessoal: "Como voc√™ est√° se sentindo?"\n`;
    context += `‚Ä¢ EXEMPLOS CORRETOS:\n`;
    context += `  - "Como voc√™ est√° se sentindo hoje?"\n`;
    context += `  - "Que sintomas voc√™ tem apresentado?"\n`;
    context += `  - "Recomendo que voc√™ comece com esta dosagem..."\n`;
    context += `‚Ä¢ Mantenha o tom pessoal e direto\n`;
  }
  
  context += `\n=== INSTRU√á√ïES GERAIS PARA USO DO PERFIL (FASE 3) ===\n`;
  
  if (patient.status === 'MEMBRO') {
    context += `‚Ä¢ Este √© um MEMBRO ativo da associa√ß√£o\n`;
    context += `‚Ä¢ Use os dados detalhados para personalizar a conversa\n`;
    context += `‚Ä¢ Pode referenciar informa√ß√µes espec√≠ficas do perfil quando relevante\n`;
    
    if (patient.cpf || patient.cpf_responsavel) {
      context += `‚Ä¢ Pode usar o CPF como fator secund√°rio de verifica√ß√£o de identidade se necess√°rio\n`;
    }
    
    context += `‚Ä¢ Forne√ßa atendimento completo e personalizado\n`;
    context += `‚Ä¢ Demonstre conhecimento do hist√≥rico do paciente quando apropriado\n`;
  } else if (patient.status === 'LEAD') {
    context += `‚Ä¢ Este √© um LEAD (perfil incompleto)\n`;
    context += `‚Ä¢ PRIORIDADE: explicar o processo de associa√ß√£o de forma clara\n`;
    context += `‚Ä¢ OBJETIVO: coletar informa√ß√µes necess√°rias para converter em MEMBRO\n`;
    context += `‚Ä¢ Campos a coletar: tipo de associa√ß√£o, dados do respons√°vel (se aplic√°vel)\n`;
    context += `‚Ä¢ Mantenha o foco na convers√£o do lead com abordagem educativa\n`;
    context += `‚Ä¢ Explique os benef√≠cios de ser membro da associa√ß√£o\n`;
  }
  
  context += `\n=== VALIDA√á√ÉO DE CONTEXTO (FASE 3) ===\n`;
  context += `‚Ä¢ Antes de responder, confirme mentalmente:\n`;
  context += `  1. Estou me dirigindo √† pessoa correta (${interlocutorName})?\n`;
  context += `  2. Estou me referindo ao paciente corretamente (${patientName})?\n`;
  context += `  3. Estou usando a linguagem apropriada para o cen√°rio?\n`;
  context += `  4. Minhas instru√ß√µes s√£o claras sobre quem deve fazer o qu√™?\n`;
  
  return context;
}

const guideSatizapConversationInputSchema = z.object({
  conversationId: z.string(),
  patientMessage: z.string(),
  conversationHistory: z.array(z.any()),
  patient: z.any().optional(), // Make optional for new patients
  association: z.any().optional(),
  // Phase 2: Dynamic tenant context
  tenantId: z.string().describe('Association subdomain or ID for dynamic context loading'),
  // Phase 2: Patient form data (for new patients)
  patientFormData: z.object({
    fullName: z.string(),
    whatsapp: z.string(),
    email: z.string().optional(),
    // Fase 2: Interlocutor context
    interlocutorName: z.string().optional(),
    isResponsibleScenario: z.boolean().optional(),
  }).optional().describe('New patient form data when no existing patient'),
  // Phase 3: Hybrid mode flag
  useHybridMode: z.boolean().default(false).describe('Whether to use the hybrid AI orchestrator'),
  // Fase 2: Interlocutor context for existing patients
  interlocutorContext: z.object({
    interlocutorName: z.string(),
    isResponsibleScenario: z.boolean(),
    patientName: z.string(),
  }).optional().describe('Context about who is speaking in the chat'),
});

const guideSatizapConversationOutputSchema = z.object({
  text: z.string().describe('Resposta em texto do assistente SATIZAP'),
  components: z.array(z.any()).optional().describe('Componentes din√¢micos para renderizar na interface'),
  confidence: z.number().min(0).max(1).describe('N√≠vel de confian√ßa na resposta (0-1)'),
  requestHandoff: z.boolean().describe('Se deve transferir para atendente humano'),
  handoffReason: z.string().optional().describe('Motivo da transfer√™ncia para humano'),
  detectedIntent: z.string().describe('Inten√ß√£o detectada na mensagem do paciente'),
  suggestedProducts: z.array(z.string()).optional().describe('IDs dos produtos sugeridos'),
});

export type GuideSatizapConversationOutput = z.infer<typeof guideSatizapConversationOutputSchema>;

export const guideSatizapConversation = ai.defineFlow(
  {
    name: 'guideSatizapConversation',
    inputSchema: guideSatizapConversationInputSchema,
    outputSchema: guideSatizapConversationOutputSchema,
  },
  async (input) => {
    const { conversationId, patientMessage, conversationHistory, patient, association, tenantId, patientFormData, useHybridMode, interlocutorContext } = input;
    
    console.log(`[guideSatizapConversation] Starting for tenant: ${tenantId} ${useHybridMode ? '(HYBRID MODE)' : '(LEGACY MODE)'}`);
    
    // Phase 3: Check if we should use hybrid orchestrator
    if (useHybridMode && patient) {
      console.log(`[guideSatizapConversation] Using hybrid AI orchestrator`);
      
      try {
        // Initialize conversation state if needed
        await initializeConversationState(conversationId);
        
        // Prepare input for hybrid orchestrator
        const hybridInput: HybridAIInput = {
          conversationId,
          patientMessage,
          conversationHistory: conversationHistory.map((msg: any) => ({
            role: msg.senderType === 'paciente' ? 'paciente' as const : 
                 msg.senderType === 'ia' ? 'ia' as const :
                 msg.role === 'user' ? 'paciente' as const :
                 msg.role === 'ai' ? 'ia' as const : 'ia' as const,
            content: msg.content,
            timestamp: msg.timestamp || new Date().toISOString()
          })),
          currentOrder: [], // Would need to be passed from conversation context
          patient: {
            id: patient.id,
            name: patient.name,
            whatsapp: patient.whatsapp,
            email: patient.email
          },
          association: association as Association
        };
        
        // Use hybrid orchestrator
        const hybridResult = await hybridAIOrchestrator(hybridInput);
        
        // Convert hybrid result to expected output format
        return {
          text: hybridResult.text as string,
          components: hybridResult.components || [],
          confidence: 0.9, // High confidence for hybrid responses
          requestHandoff: false,
          handoffReason: '',
          detectedIntent: 'hybrid_response',
          suggestedProducts: []
        };
        
      } catch (error) {
        console.error(`[guideSatizapConversation] Hybrid orchestrator error:`, error);
        // Fall through to legacy mode on error
      }
    }
    
    console.log(`[guideSatizapConversation] Starting for tenant: ${tenantId}`);
    
    // Phase 2: Load dynamic context
    let dynamicContext = null;
    try {
      dynamicContext = await getContext(tenantId);
      if (dynamicContext) {
        console.log(`[guideSatizapConversation] Loaded dynamic context for: ${dynamicContext.associationName}`);
      }
    } catch (error) {
      console.error(`[guideSatizapConversation] Failed to load dynamic context:`, error);
    }
    
    // Use dynamic context if available, otherwise fallback to static association
    const effectiveAssociation = dynamicContext ? {
      id: dynamicContext.associationId,
      name: dynamicContext.associationName,
      wordpressUrl: dynamicContext.wordpressUrl,
      wordpressAuth: dynamicContext.wordpressAuth,
      apiConfig: dynamicContext.apiConfig,
      promptContext: dynamicContext.promptContext,
      aiDirectives: dynamicContext.aiDirectives,
      aiRestrictions: dynamicContext.aiRestrictions,
    } : association;
    
    // Phase 2: Handle new patient onboarding with findOrCreatePatient tool
    if (!patient && patientFormData) {
      console.log(`[guideSatizapConversation] New patient detected, using findOrCreatePatient tool`);
      
      // This is a new patient - use the findOrCreatePatient tool
      try {
        const findPatientResponse = await ai.generate({
          model: 'googleai/gemini-1.5-flash',
          prompt: `Um novo paciente preencheu o formul√°rio inicial com os dados: Nome: ${patientFormData.fullName}, WhatsApp: ${patientFormData.whatsapp}${patientFormData.email ? `, Email: ${patientFormData.email}` : ''}. Use a ferramenta findOrCreatePatient para verificar se o paciente j√° existe no sistema ou criar um novo registro.`,
          tools: [findOrCreatePatientTool],
        });
        
        // The tool call response will contain the patient status and next steps
        console.log(`[guideSatizapConversation] findOrCreatePatient completed`);
        
        // Return the tool's response directly for new patient onboarding
        return {
          text: findPatientResponse.text || 'Processando seu cadastro...',
          components: [],
          confidence: 1.0,
          requestHandoff: false,
          handoffReason: '',
          detectedIntent: 'patient_onboarding',
          suggestedProducts: [],
        };
        
      } catch (error) {
        console.error(`[guideSatizapConversation] Error in patient onboarding:`, error);
        return {
          text: 'Ocorreu um erro ao processar seu cadastro. Tente novamente ou entre em contato com o suporte.',
          components: [],
          confidence: 0.0,
          requestHandoff: true,
          handoffReason: 'Erro no processo de cadastro',
          detectedIntent: 'error',
          suggestedProducts: [],
        };
      }
    }
    
    // Build conversation context
    const historyText = conversationHistory
      .map((msg: ConversationMessage) => `${msg.senderType}: ${msg.content}`)
      .join('\n');

    // Build association-specific context with dynamic WordPress credentials
    const associationName = effectiveAssociation?.name || 'SATIZAP';
    const associationContext = effectiveAssociation?.promptContext 
      ? `\n\nCONTEXTO ESPEC√çFICO DA ASSOCIA√á√ÉO:\n${effectiveAssociation.promptContext}\n` 
      : '';
    
    // Build AI directives section
    const aiDirectives = effectiveAssociation?.aiDirectives 
      ? `\n\nDIRETRIZES ESPEC√çFICAS DE ATENDIMENTO:\nSiga estritamente as seguintes diretrizes em todas as suas intera√ß√µes:\n${effectiveAssociation.aiDirectives}\n`
      : '';
    
    // Build AI restrictions section
    const aiRestrictions = effectiveAssociation?.aiRestrictions 
      ? `\n\nRESTRI√á√ïES OBRIGAT√ìRIAS:\nSob nenhuma circunst√¢ncia voc√™ deve:\n${effectiveAssociation.aiRestrictions}\n`
      : '';

    // FASE 2: Inje√ß√£o do Perfil Completo do Paciente + Contexto do Interlocutor
    // Carregar o registro completo do paciente com todos os novos campos ACF
    let patientProfileContext = '';
    if (patient) {
      patientProfileContext = buildPatientProfileContext(patient);
    }
    
    // FASE 3: Contexto din√¢mico aprimorado do interlocutor
    let interlocutorInstructions = '';
    if (interlocutorContext) {
      interlocutorInstructions = `\n\n=== CONTEXTO DIN√ÇMICO AVAN√áADO DO INTERLOCUTOR (FASE 3) ===\n`;
      if (interlocutorContext.isResponsibleScenario) {
        interlocutorInstructions += `üîπ ATEN√á√ÉO CR√çTICA: Voc√™ est√° conversando com ${interlocutorContext.interlocutorName} (RESPONS√ÅVEL)\n`;
        interlocutorInstructions += `üîπ O atendimento √© para o paciente: ${interlocutorContext.patientName}\n`;
        interlocutorInstructions += `üîπ REGRA FUNDAMENTAL: SEMPRE se dirija ao respons√°vel diretamente, mas refira-se ao paciente na terceira pessoa\n`;
        interlocutorInstructions += `\nüîπ EXEMPLOS OBRIGAT√ìRIOS DE USO:\n`;
        interlocutorInstructions += `  ‚úÖ CORRETO: "Como o(a) ${interlocutorContext.patientName} est√° se sentindo hoje?"\n`;
        interlocutorInstructions += `  ‚ùå INCORRETO: "Como voc√™ est√° se sentindo hoje?"\n`;
        interlocutorInstructions += `  ‚úÖ CORRETO: "Que sintomas o(a) ${interlocutorContext.patientName} tem apresentado?"\n`;
        interlocutorInstructions += `  ‚ùå INCORRETO: "Que sintomas voc√™ tem apresentado?"\n`;
        interlocutorInstructions += `  ‚úÖ CORRETO: "Voc√™ pode administrar este produto ao ${interlocutorContext.patientName} da seguinte forma..."\n`;
        interlocutorInstructions += `  ‚ùå INCORRETO: "Voc√™ pode tomar este produto da seguinte forma..."\n`;
        interlocutorInstructions += `\nüîπ INSTRU√á√ïES ESPEC√çFICAS PARA PEDIDOS:\n`;
        interlocutorInstructions += `  ‚Ä¢ Confirme: "Os dados de entrega s√£o do paciente ${interlocutorContext.patientName}, correto?"\n`;
        interlocutorInstructions += `  ‚Ä¢ Use: "Este pedido √© para ${interlocutorContext.patientName}, voc√™ como respons√°vel est√° fazendo a solicita√ß√£o"\n`;
        interlocutorInstructions += `\nüîπ INSTRU√á√ïES PARA DOSAGEM E TRATAMENTO:\n`;
        interlocutorInstructions += `  ‚Ä¢ Use: "Oriente ${interlocutorContext.patientName} a come√ßar com..."\n`;
        interlocutorInstructions += `  ‚Ä¢ Use: "Voc√™ pode dar ao ${interlocutorContext.patientName}..."\n`;
        interlocutorInstructions += `  ‚Ä¢ Use: "Monitore como ${interlocutorContext.patientName} reage ao tratamento"\n`;
      } else {
        interlocutorInstructions += `üîπ CEN√ÅRIO: Conversando diretamente com o paciente ${interlocutorContext.interlocutorName}\n`;
        interlocutorInstructions += `üîπ Use linguagem direta e pessoal ("voc√™", "seu", "sua")\n`;
        interlocutorInstructions += `üîπ EXEMPLOS CORRETOS:\n`;
        interlocutorInstructions += `  ‚úÖ "Como voc√™ est√° se sentindo hoje?"\n`;
        interlocutorInstructions += `  ‚úÖ "Que sintomas voc√™ tem apresentado?"\n`;
        interlocutorInstructions += `  ‚úÖ "Recomendo que voc√™ comece com esta dosagem..."\n`;
      }
      interlocutorInstructions += `\nüîπ VALIDA√á√ÉO ANTES DE RESPONDER:\n`;
      interlocutorInstructions += `  1. Confirme: Estou me dirigindo √† pessoa correta?\n`;
      interlocutorInstructions += `  2. Confirme: Estou usando a linguagem apropriada para o cen√°rio?\n`;
      interlocutorInstructions += `  3. Confirme: Minhas instru√ß√µes s√£o claras sobre quem deve fazer o qu√™?\n`;
      interlocutorInstructions += `\n`;
    }
    
    // Phase 2: Enhanced API configuration with dynamic context
    const wordpressConfig = effectiveAssociation?.wordpressUrl && effectiveAssociation?.wordpressAuth ? {
      wordpressUrl: effectiveAssociation.wordpressUrl,
      wordpressAuth: effectiveAssociation.wordpressAuth
    } : undefined;
    
    // Extract apiConfig for dynamic endpoint usage (Phase 2 enhancement)
    const apiConfig: ApiConfig | undefined = effectiveAssociation?.apiConfig;
    
    // Build enhanced system prompt that includes API configuration status
    const apiConfigStatus = apiConfig 
      ? `\n- Configura√ß√£o API din√¢mica ativa: ${apiConfig.authMethod === 'applicationPassword' ? 'WordPress Application Password' : 'WooCommerce Consumer Key/Secret'}`
      : '\n- Usando configura√ß√£o padr√£o do sistema';
      
    const dynamicContextStatus = dynamicContext 
      ? `\n- Contexto din√¢mico carregado com sucesso para: ${dynamicContext.associationName}`
      : '\n- Usando contexto est√°tico';
    
    const systemPrompt = `Voc√™ √© SATIZAP, um assistente especializado em cannabis medicinal altamente qualificado e emp√°tico. Voc√™ trabalha para ${associationName}, uma associa√ß√£o de pacientes de cannabis medicinal.${associationContext}${aiDirectives}${aiRestrictions}${apiConfigStatus}${dynamicContextStatus}

=== FASE 3: INSTRU√á√ïES CR√çTICAS DE COMUNICA√á√ÉO CONTEXTUAL ===

ANTES DE GERAR QUALQUER RESPOSTA, VOC√ä DEVE SEGUIR ESTE PROTOCOLO:

1. AN√ÅLISE DO CONTEXTO:
   - Identifique quem est√° falando no chat (paciente ou respons√°vel)
   - Identifique para quem √© o atendimento (sempre o paciente)
   - Determine o tipo de relacionamento (direto ou via respons√°vel)

2. ADAPTA√á√ÉO DA LINGUAGEM:
   - CEN√ÅRIO RESPONS√ÅVEL: Se dirija ao respons√°vel usando "voc√™", refira-se ao paciente pelo nome na 3¬™ pessoa
   - CEN√ÅRIO PACIENTE: Se dirija diretamente ao paciente usando "voc√™"

3. VALIDA√á√ÉO OBRIGAT√ìRIA:
   - Sua resposta est√° direcionada √† pessoa correta?
   - Voc√™ est√° se referindo ao paciente da forma apropriada?
   - Suas instru√ß√µes m√©dicas s√£o claras sobre quem deve administrar/tomar?

4. EXEMPLOS PR√ÅTICOS:
   RESPONS√ÅVEL FALANDO:
   ‚úÖ "Como o Jo√£o est√° se sentindo hoje?"
   ‚úÖ "Voc√™ pode dar este √≥leo ao Jo√£o pela manh√£"
   ‚úÖ "Monitore como a Maria reage ao tratamento"
   ‚ùå "Como voc√™ est√° se sentindo?" (deve especificar o paciente)
   
   PACIENTE FALANDO:
   ‚úÖ "Como voc√™ est√° se sentindo hoje?"
   ‚úÖ "Recomendo que voc√™ tome este √≥leo pela manh√£"
   ‚úÖ "Monitore como voc√™ reage ao tratamento"

PERSONALIDADE E COMPORTAMENTO:
- Seja emp√°tico, profissional e acolhedor
- Use linguagem clara e acess√≠vel, evitando termos t√©cnicos excessivos
- Demonstre conhecimento especializado sem ser intimidador
- Seja proativo em sugerir solu√ß√µes
- Mantenha um tom otimista e esperan√ßoso

SEU PAPEL:
1. Ajudar pacientes a encontrar produtos de cannabis medicinal adequados
2. Fornecer orienta√ß√µes sobre dosagem e uso
3. Esclarecer d√∫vidas sobre efeitos e indica√ß√µes
4. Analisar prescri√ß√µes m√©dicas (quando enviadas por imagem)
5. Guiar o processo de sele√ß√£o e pedido de produtos

FERRAMENTAS DISPON√çVEIS:
- buscarProdutos: Use para encontrar produtos baseado em sintomas, categorias ou nomes espec√≠ficos
- criarPedido: Use para criar or√ßamentos quando o paciente decidir os produtos desejados
${dynamicContext ? '- findOrCreatePatient: Para processar novos pacientes (j√° processado nesta conversa)' : ''}

QUANDO USAR FERRAMENTAS:
- Use buscarProdutos sempre que o paciente mencionar sintomas, condi√ß√µes m√©dicas ou buscar produtos espec√≠ficos
- Use criarPedido quando o paciente confirmar quais produtos deseja e suas quantidades
- Sempre passe o associationId ${effectiveAssociation?.id || 'DEFAULT'} e tenantId ${tenantId} para as ferramentas${wordpressConfig ? ` e as credenciais do WordPress quando dispon√≠veis` : ''}${apiConfig ? ` e a configura√ß√£o de API din√¢mica` : ''}

PERSONALIDADE E COMPORTAMENTO:
- Seja emp√°tico, profissional e acolhedor
- Use linguagem clara e acess√≠vel, evitando termos t√©cnicos excessivos
- Demonstre conhecimento especializado sem ser intimidador
- Seja proativo em sugerir solu√ß√µes
- Mantenha um tom otimista e esperan√ßoso

SEU PAPEL:
1. Ajudar pacientes a encontrar produtos de cannabis medicinal adequados
2. Fornecer orienta√ß√µes sobre dosagem e uso
3. Esclarecer d√∫vidas sobre efeitos e indica√ß√µes
4. Analisar prescri√ß√µes m√©dicas (quando enviadas por imagem)
5. Guiar o processo de sele√ß√£o e pedido de produtos

FERRAMENTAS DISPON√çVEIS:
- buscarProdutos: Use para encontrar produtos baseado em sintomas, categorias ou nomes espec√≠ficos
- criarPedido: Use para criar or√ßamentos quando o paciente decidir os produtos desejados

QUANDO USAR FERRAMENTAS:
- Use buscarProdutos sempre que o paciente mencionar sintomas, condi√ß√µes m√©dicas ou buscar produtos espec√≠ficos
- Use criarPedido quando o paciente confirmar quais produtos deseja e suas quantidades
- Sempre passe o associationId ${association?.id || 'DEFAULT'} para as ferramentas${wordpressConfig ? ` e as credenciais do WordPress quando dispon√≠veis` : ''}${apiConfig ? ` e a configura√ß√£o de API din√¢mica` : ''}

GATILHOS PARA TRANSFER√äNCIA HUMANA (requestHandoff: true):
- Paciente expressa frustra√ß√£o ou insatisfa√ß√£o extrema
- Quest√µes m√©dicas complexas que requerem profissional de sa√∫de
- Problemas com pedidos anteriores ou quest√µes de entrega
- Paciente solicita explicitamente falar com humano
- Voc√™ n√£o consegue entender a necessidade ap√≥s 3 tentativas
- Situa√ß√µes que envolvem efeitos adversos s√©rios
- Quest√µes legais ou de conformidade
- Emerg√™ncias m√©dicas

CAPACIDADES ESPECIAIS:
- An√°lise de prescri√ß√µes m√©dicas via OCR
- Busca de produtos na base de dados
- Cria√ß√£o de pedidos/or√ßamentos
- Recomenda√ß√µes personalizadas baseadas em sintomas
- Orienta√ß√µes sobre dosagem inicial

DADOS DO PACIENTE ATUAL (FASE 3 - CONTEXTO COMPLETO):
Nome: ${patient.name}
WhatsApp: ${patient.whatsapp}
${patient.email ? `Email: ${patient.email}` : ''}${patientProfileContext}${interlocutorInstructions}

=== INSTRU√á√ïES CR√çTICAS DE COMUNICA√á√ÉO (FASE 3) ===
ANTES DE GERAR QUALQUER RESPOSTA, VOC√ä DEVE:

1. IDENTIFICAR O INTERLOCUTOR:
   - Quem est√° digitando no chat? (${interlocutorContext?.interlocutorName || patient.name})
   - Esta pessoa √© o paciente ou o respons√°vel?

2. ADAPTAR SUA LINGUAGEM:
   - Se for respons√°vel: dirija-se ao respons√°vel, refira-se ao paciente na 3¬™ pessoa
   - Se for paciente: dirija-se diretamente ao paciente

3. VALIDAR SUA RESPOSTA:
   - Sua resposta est√° direcionada √† pessoa correta?
   - Voc√™ est√° se referindo ao paciente da forma apropriada?
   - Suas instru√ß√µes s√£o claras sobre quem deve fazer o qu√™?

4. PERSONALIZAR O ATENDIMENTO:
   - Use os dados do perfil para personalizar a conversa
   - Considere o status (MEMBRO vs LEAD) para adaptar a abordagem
   - Mantenha consist√™ncia com o contexto estabelecido

HIST√ìRICO DA CONVERSA:
${historyText}

MENSAGEM ATUAL DO PACIENTE: "${patientMessage}"

INSTRU√á√ïES DE RESPOSTA:
1. Analise a mensagem e detecte a inten√ß√£o principal
2. Determine se precisa transferir para humano
3. Se n√£o precisar transferir, forne√ßa uma resposta √∫til e espec√≠fica
4. Sugira componentes de interface quando apropriado (bot√µes, cards de produtos)
5. Mantenha o foco na cannabis medicinal e sa√∫de do paciente
6. Se detectar poss√≠vel emerg√™ncia m√©dica, transfira imediatamente

COMPONENTES DISPON√çVEIS:
- productCard: Para mostrar produtos espec√≠ficos
- quickReplyButton: Para op√ß√µes de resposta r√°pida
- orderSummaryCard: Para resumir sele√ß√µes
- orderControlButtons: Para finalizar pedidos

Responda sempre em portugu√™s brasileiro.`;

    try {
      const response = await ai.generate({
        model: 'googleai/gemini-1.5-flash',
        prompt: systemPrompt,
        tools: [buscarProdutosTool, criarPedidoTool, findOrCreatePatientTool],
        config: {
          temperature: 0.7,
          maxOutputTokens: 1024,
        },
      });

      const aiText = response.text || 'Desculpe, n√£o consegui processar sua mensagem. Pode reformular?';

      // Simple intent detection and handoff logic
      const lowerMessage = patientMessage.toLowerCase();
      
      // Check for handoff triggers
      let requestHandoff = false;
      let handoffReason = '';
      
      const handoffTriggers = [
        { keywords: ['humano', 'pessoa', 'atendente', 'operador'], reason: 'Solicita√ß√£o de atendimento humano' },
        { keywords: ['problema', 'erro', 'bug', 'n√£o funciona'], reason: 'Problema t√©cnico reportado' },
        { keywords: ['reclama√ß√£o', 'insatisfeito', 'ruim', 'p√©ssimo'], reason: 'Insatisfa√ß√£o do cliente' },
        { keywords: ['emerg√™ncia', 'urgente', 'ajuda', 'socorro'], reason: 'Situa√ß√£o de urg√™ncia' },
        { keywords: ['efeito adverso', 'efeito colateral', 'rea√ß√£o'], reason: 'Poss√≠vel efeito adverso' },
      ];

      for (const trigger of handoffTriggers) {
        if (trigger.keywords.some(keyword => lowerMessage.includes(keyword))) {
          requestHandoff = true;
          handoffReason = trigger.reason;
          break;
        }
      }

      // Detect intent
      let detectedIntent = 'general_inquiry';
      if (lowerMessage.includes('prescri√ß√£o') || lowerMessage.includes('receita')) {
        detectedIntent = 'prescription_analysis';
      } else if (lowerMessage.includes('produto') || lowerMessage.includes('√≥leo') || lowerMessage.includes('cbd')) {
        detectedIntent = 'product_inquiry';
      } else if (lowerMessage.includes('dosagem') || lowerMessage.includes('como usar')) {
        detectedIntent = 'dosage_question';
      } else if (lowerMessage.includes('pedido') || lowerMessage.includes('comprar')) {
        detectedIntent = 'order_creation';
      }

      // Generate appropriate components based on intent
      const components: DynamicComponentData[] = [];
      
      if (detectedIntent === 'product_inquiry' && !requestHandoff) {
        components.push({
          type: 'quickReplyButton',
          label: 'Ver Cat√°logo Completo',
          payload: 'show_all_products'
        });
        components.push({
          type: 'quickReplyButton',
          label: 'Produtos para Dor',
          payload: 'products_for_pain'
        });
        components.push({
          type: 'quickReplyButton',
          label: 'Produtos para Ansiedade',
          payload: 'products_for_anxiety'
        });
      }

      return {
        text: requestHandoff 
          ? `${aiText}\n\nVou transferir voc√™ para um de nossos atendentes especializados que poder√° ajud√°-lo melhor. Aguarde um momento, por favor.`
          : aiText,
        components,
        confidence: requestHandoff ? 1.0 : 0.8,
        requestHandoff,
        handoffReason,
        detectedIntent,
        suggestedProducts: [],
      };

    } catch (error) {
      console.error('Error in SATIZAP conversation flow:', error);
      
      return {
        text: 'Desculpe, ocorreu um erro t√©cnico. Vou transferir voc√™ para um atendente humano.',
        components: [],
        confidence: 0.0,
        requestHandoff: true,
        handoffReason: 'Erro t√©cnico no sistema de IA',
        detectedIntent: 'error',
        suggestedProducts: [],
      };
    }
  }
);